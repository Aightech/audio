// #include <alsa/asoundlib.h>
// #include <iostream>
// #include <lsl_cpp.h>
// #include <stdio.h>
// #include <stdlib.h>

// snd_pcm_t *
// init(snd_pcm_stream_t mode,  unsigned int actualRate)
// {
//     int err;
//     snd_pcm_t *playback_handle;
//     snd_pcm_hw_params_t *hw_params;
   

//     if((err = snd_pcm_open(&playback_handle, "default", mode, 0)) < 0)
//         throw std::string("cannot open audio device ") + snd_strerror(err);

//     if((err = snd_pcm_hw_params_malloc(&hw_params)) < 0)
//         throw std::string("cannot allocate hw param. ") + snd_strerror(err);

//     if((err = snd_pcm_hw_params_any(playback_handle, hw_params)) < 0)
//         throw std::string("cannot initialize hw param. ") + snd_strerror(err);

//     if((err = snd_pcm_hw_params_set_access(playback_handle, hw_params,
//                                            SND_PCM_ACCESS_RW_INTERLEAVED)) < 0)
//         throw std::string("cannot set access type ") + snd_strerror(err);

//     if((err = snd_pcm_hw_params_set_format(playback_handle, hw_params,
//                                            SND_PCM_FORMAT_S16_LE)) < 0)
//         throw std::string("cannot set sample format ") + snd_strerror(err);

//     if((err = snd_pcm_hw_params_set_rate_near(playback_handle, hw_params,
//                                               &actualRate, 0)) < 0)
//         throw std::string("cannot set sample rate ") + snd_strerror(err);

//     if((err = snd_pcm_hw_params_set_channels(playback_handle, hw_params, 2)) <
//        0)
//         throw std::string("cannot set channel count ") + snd_strerror(err);

//     if((err = snd_pcm_hw_params(playback_handle, hw_params)) < 0)
//         throw std::string("cannot set parameters ") + snd_strerror(err);

//     snd_pcm_hw_params_free(hw_params);

//     if((err = snd_pcm_prepare(playback_handle)) < 0)
//         throw std::string("cannot prepare interface ") + snd_strerror(err);

//     return playback_handle;
// };

// int
// main(int argc, char *argv[])
// {
//     int err;
//     short buf[256];
//     unsigned int actualRate = 44100;
//     unsigned int actualPeriod = 1000000/actualRate;
//     snd_pcm_t *capture_handle = init(SND_PCM_STREAM_CAPTURE, actualRate);
    

//     try
//     {

//         int nb_ch = 1;
// 	int s_chunk = 1;
//         lsl::stream_info info_sample("audio", "sample", nb_ch, actualRate, lsl::cf_int16);
//         lsl::stream_outlet outlet_sample(info_sample);
//         std::cout << "[INFOS] Now sending data... " << std::endl;

//         for(int t=0;;t++)
//         {
//             if((err = snd_pcm_readi(capture_handle, buf, s_chunk)) != s_chunk)
//                 throw std::string("read from audio  failed ") +
//                     snd_strerror(err);
	    

//             for(int j = 0; j < s_chunk; j++)
// 	      {
//                 outlet_sample.push_numeric_raw((&buf[2*j]));
// 		//usleep(actualPeriod);
// 	      }
// 	    //std::cout << t << std::endl;

//         }
//     }
//     catch(std::exception &e)
//     {
//         std::cerr << "[ERROR] Got an exception: " << e.what() << std::endl;
//     }

//     snd_pcm_close(capture_handle);
//     return 0;
// }

#include <iostream>
#include <vector>
#include <chrono>
#include <thread>
#include <lsl_cpp.h>
#include <portaudio.h>

#define FRAMES_PER_BUFFER 512

using namespace std::chrono_literals;

typedef struct
{
    const float *input_buffer;
    unsigned long frames_per_buffer;
    unsigned long sample_rate;
} paData;

static int paCallback(const void *inputBuffer, void *outputBuffer,
                      unsigned long framesPerBuffer,
                      const PaStreamCallbackTimeInfo *timeInfo,
                      PaStreamCallbackFlags statusFlags, void *userData)
{
    paData *data = (paData *)userData;
    float *out = (float *)outputBuffer;
    const float *in = data->input_buffer;
    unsigned int i, j;

    for (i = 0; i < framesPerBuffer; i++)
    {
        for (j = 0; j < 2; j++)
        {
            *out++ = *in++;
        }
    }

    (void)timeInfo;  // Prevent unused variable warnings.
    (void)statusFlags;
    return paContinue;
}

int main()
{
    // resolve LSL stream and create inlet
    std::vector<lsl::stream_info> results = lsl::resolve_stream("name", "Kistler");
    lsl::stream_inlet inlet(results[0]);

    // initialize PortAudio
    PaError err;
    err = Pa_Initialize();
    if (err != paNoError)
    {
        std::cerr << "Error initializing PortAudio: " << Pa_GetErrorText(err) << std::endl;
        return -1;
    }

    // set up stream parameters
    PaStream *stream;
    paData data;
    data.sample_rate = 44100;
    data.frames_per_buffer = FRAMES_PER_BUFFER;

    // open PortAudio stream
    err = Pa_OpenDefaultStream(&stream, 0, 2, paFloat32, data.sample_rate, data.frames_per_buffer, paCallback, &data);
		if (err != paNoError)
		{
				std::cerr << "Error opening PortAudio stream: " << Pa_GetErrorText(err) << std::endl;
				return -1;
		}

		// start PortAudio stream
		err = Pa_StartStream(stream);
		if (err != paNoError)
		{
				std::cerr << "Error starting PortAudio stream: " << Pa_GetErrorText(err) << std::endl;
				return -1;
		}

		// create LSL stream outlet
		lsl::stream_info info("audio", "sample", 2, data.sample_rate, lsl::cf_float32);
		lsl::stream_outlet outlet(info);

		// receive data from LSL and send to PortAudio
		std::vector<float> sample;
		while (true)
		{
				inlet.pull_sample(sample);
				data.input_buffer = sample.data();
				std::this_thread::sleep_for(1ms);
		}

		// stop PortAudio stream
		err = Pa_StopStream(stream);
		if (err != paNoError)
		{
				std::cerr << "Error stopping PortAudio stream: " << Pa_GetErrorText(err) << std::endl;
				return -1;
		}

		// close PortAudio stream
		err = Pa_CloseStream(stream);
		if (err != paNoError)
		{
				std::cerr << "Error closing PortAudio stream: " << Pa_GetErrorText(err) << std::endl;
				return -1;
		}

		// terminate PortAudio
		err = Pa_Terminate();
		if (err != paNoError)
		{
				std::cerr << "Error terminating PortAudio: " << Pa_GetErrorText(err) << std::endl;
				return -1;
		}

		return 0;
}

#include <iostream>
#include <vector>
#include <chrono>
#include <thread>
#include <lsl_cpp.h>
#include <portaudio.h>

#define FRAMES_PER_BUFFER 512

using namespace std::chrono_literals;

typedef struct
{
		const float *input_buffer;
		unsigned long frames_per_buffer;
		unsigned long sample_rate;
} paData;

static int paCallback(const void *inputBuffer, void *outputBuffer,
											unsigned long framesPerBuffer,
											const PaStreamCallbackTime
